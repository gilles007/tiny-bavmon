.include "ggtiny4.ah"

;##################################################################################################################################
;
;  I M P O R T A N T   N O T E :   A S   P E R   G I G A   D E V I C E S   N A N O   O S   S P E C I F I C A T I O N S
;  AT-Tiny Register r25 is a system wide ZERO register (always set to zero by initialization and by each intterupt (just in case)
;  Additionally! Because the Tiny has limited ROM (and to save space) bios interrupts use registers r24~r25 without saving them
;
;##################################################################################################################################

#ifndef  __SFR_OFFSET
#warning __SFR_OFFSET was not defined, you may not be using the right compiler
#define  __SFR_OFFSET    0
#endif




; Events, configuration constants
;==================================
.equ  EVENT_TIMER_BIT,  	0
.equ  EVENT_TIMER,       (1 << EVENT_TIMER_BIT)

; LED is the Linux Heartbeat (if connected to us to enable watchdog)
.equ  EVENT_LED_ON_BIT,   2
.equ  EVENT_LED_ON,      (1 << EVENT_LED_ON_BIT)
.equ  EVENT_LED_OFF_BIT,  3
.equ  EVENT_LED_OFF,     (1 << EVENT_LED_OFF_BIT)



;************************************************
; Target Hardware Constants for library routines
;************************************************

.equ  PORT_IN,              PINB
.equ  PORT_OUT,             PORTB


; PB0: BOOTSTRAP_WD input is used to enable/disable linux heartbeat watchdot
; when tied to ground, this pin will never see any rising edges and WD will be disabled
; when tied to the linux heartbeat LED, this pin will detect the heartbeat and enable WD reset
; NOTE THAT THE CODE ASSUMES THIS TO BE 0 (as we ror PBIN into the cary to then roll C into the signature)
.equ  LINUX_HBLED_BIT,            0
.equ  LINUX_HBLED,               (1 << LINUX_HBLED_BIT)


; PB1: BOOTSTRAP_ON input used to enable/disable Always ON Appliance mode
; weak pulled up externally to +5V will enable the always on Appliance
; weak pulled down externally will disable the always on Appliance mode
; The theory here is that the BAV335x +3.3V is off by default, when pulled up, this pin will read 1 until the BAV +3.3V goes on, pulling this pin down
; this is how we can detect if the PMIC was disabled by software (pin goes high again, unless externally pulled down to disable the always on mode).
; Basically, if this pin is EVER high, then the appliance mode is enabled (not just a bootstrap option really),
; and we are responsible for turning on the PMIC by generating a pulse in the Power Button Port (here below defined)
.equ  BOOTSTRAP_PWR_BIT,          1
.equ  BOOTSTRAP_PWR,             (1 << BOOTSTRAP_PWR_BIT)


; PB2: output to the mosfet which simulates depressing the PMIC power button (when high)
.equ  OUT_PMICBUTTON_BIT,         2
.equ  OUT_PMICBUTTON,            (1 << OUT_PMICBUTTON_BIT)


; PB3: output to the mosfet which produces the BAV335x system wide reset (when high)
; we use the same bit as the GPIO so we can use the status flags to output GPIO values
.equ  OUT_BAVRESET_BIT,           3
.equ  OUT_BAVRESET,              (1 << OUT_BAVRESET_BIT)




;*******************************************
; Target Hardware Constants for application
;*******************************************

; Typical Linux Heartbeat under light load is:
;      RS                          T                               P       Q   RS                          T                         P
;       _____________               _____________                               _____________               ____________ 
;      |             |             |             |                             |             |             |            |
; _____|             |_____________|             |_____________________________|             |_____________|            |__________________
;      .<-- 125ms -->.<-- 155ms -->.<-- 125ms -->.<---------  775ms  --------->.                             .
;      |<--------  280ms  -------->|<----------------  900ms  ---------------->|
;
.equ  LINUX_QRST_THRESHOLD,      40     ; If the low state lasts longer than this treshold, we shift a second '0' to the signature


.equ  TIME_SETTLE_PMIC_TEST,      8     ; We wait 80ms after reset to check if the board PMIC needs a pulse to turn on the power

.equ  TIME_PMIC_ON,              30     ; Depress PMIC button fo 1/3 of s second to turn the board from OFF to ON state

.equ  TIME_IN_RESET_HI,           3
.equ  TIME_IN_RESET_LO,          82     ; pressing the PMIC button got >8s causes power cycle. We depress it for 8.5 seconds to achieve thsi





;***************************************
; Target Application Specific Constants
;***************************************

; SUMMARY of FLAGS
;       x           x           x           x      |      x            x            x            x
;    INRESET    POST_RESET   PMIC_ON               |  WD_ENABLED                QRST_TO       LED_ON

.equ  STATE_IN_RESET_BIT,         7
.equ  STATE_POST_RESET_BIT,       6
.equ  STATE_PMIC_ON_BIT,          5
.equ  FLAG_WD_ENABLED_BIT,        3
.equ  FLAG_QRST_TIMEOUT_BIT,      1
.equ  FLAG_LED_IS_ON_BIT,         0

; It is important for LED_IS_ON to be on bit0 so that we can easily roll it into the cary.


; NOTE that STATE_IN_RESET, STATE_POST_RESET and STATE_PMIC_ON are really composites of a state machine controlling the PMIC button GPIO output
; We pack them here in the flags to avoid creating a state varible but since they are states, they are MUTUALLY EXCLUSIVE.


; STATE_IN_RESET  state idicates that we lost linux heartbeat and must issue a reset.
; since we only have one output, this is accomplished by pressing the PMIC button for 10 seconds, release it for 1/2sec and then press it again for 1/2sec
.equ  STATE_IN_RESET,             (1 << STATE_IN_RESET_BIT)

; STATE_POST_RESET  flag is what happens after FLAG_IN_RESET where we wait 1/2 before pressing the PMIC button again to turn it back on
; in this 'state', we wait 1/2 with the PMIC button OFF before switching over to STATE_PMIC_ON to re-start the PMIC
.equ  STATE_POST_RESET,          (1 << STATE_POST_RESET_BIT)

; STATE_PMIC_ON  flag indicates that we are in the middle of generating a pulse to the PMIC power button to turn the board ON
; in this 'state', we wait for a pre-determined amount of 10ms counts and then release the power button
.equ  STATE_PMIC_ON,             (1 << STATE_PMIC_ON_BIT)


; FLAG_WD_ENABLED  is set once we have observed enough regular heartbeats matching the linux signature
; This in turn enables the Linux heartbeat Watchdog functionality where we Reset the BAV upon heartbeat timeouts.
.equ  FLAG_WD_ENABLED,           (1 << FLAG_WD_ENABLED_BIT)


; FLAG_QRST_TIMEOUT is set when a timeout (> 2.55 seconds) happens waiting for a LED toggle
; We keep track of this so that next time a LED toggle happens, we do not try to figure out timings, just log the bit
.equ  FLAG_QRST_TIMEOUT,        (1 << FLAG_QRST_TIMEOUT_BIT)


; FLAG_LED_IS_ON is set/reset when we receive the toggle LED interrupt event to help us know if we timed out with the LED On or Off.
; We use this flag to push the last status of the LED into the heatbeat_signature when there is a time out on the heartbeat
; (this is why we use bit 0 so we can easily roll it into the carry with one instruction)
.equ  FLAG_LED_IS_ON,           (1 << FLAG_LED_IS_ON_BIT)



; The ONEs represent the LED on, single Zero is the short pulse between 2 ONs, and the TWO Zeroes are the long pulse
; so, a valid signature will look like 10s followed by 100s. something like 1010010100101001010010100 
; To detect if watchdog is enabled, we test right after logging a 1 so we will see either:
;  1010 0101 0010 1001 - 0xA529
;  1001 0100 1010 0101 - 0x94A5
.equ  LINUX_VALID_SIGHI, 0x94
.equ  LINUX_VALID_SIGLO, 0xA5
